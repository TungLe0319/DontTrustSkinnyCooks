generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  image         String?
  bio           String?
  personalSite  String?
  instagram     String?
  facebook      String?
  x             String?
  emailVerified DateTime?
  name          String?
  password      String?
  accounts      Account[]
  recipes       Recipe[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          Int        @id @default(autoincrement())
  title       String
  description String     @db.LongText
  ingredients String     @db.LongText
  directions  String     @db.LongText
  servingSize Int
  prepTime    String?
  cookTime    String?
  notes       String
  image       String?
  userId      String
  yieldAmount String?
  isPublic    Boolean?   @default(false)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[] @relation("CategoryToRecipe")

  @@index([userId], map: "Recipe_userId_fkey")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  recipes Recipe[] @relation("CategoryToRecipe")
}
